name: dotnet-novu
services:
  # s3 minio is used for local development (rather than tests)
  # because it stores files across docker restart unlike localstack free version (requires pro)
  s3:
    image: 'minio/minio:latest'
    container_name: dotnet-novu-s3-minio
    ports:
      - ${FORWARD_MINIO_PORT:-9000}:9000
      - ${FORWARD_MINIO_CONSOLE_PORT:-9090}:9090
    environment:
      MINIO_ROOT_USER: '${AWS_ACCESS_KEY_ID}'
      MINIO_ROOT_PASSWORD: '${AWS_SECRET_ACCESS_KEY}'
      MINIO_API_CORS_ALLOW_ORIGIN: http://localhost:${APP_PORT}
    restart: always
    volumes:
      - 'minio:/data/minio'
    command: minio server /data/minio --console-address ":9090"
    networks:
      - novu
  #
  # Novu notification services
  # see https://github.com/novuhq/novu/blob/next/docker/local/deployment/docker-compose.yml
  #
  redis:
    image: 'redis:alpine'
    container_name: dotnet-novu-redis
    restart: unless-stopped
    ports:
      - ${REDIS_PORT:-6379}:6379
    healthcheck:
      test: "bash -c 'redis-cli ping'"
      retries: 5
      interval: 10s
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    networks:
      - novu
#  redis-slave:
#    image: 'redis:alpine'
#    container_name: redis-slave
#    restart: unless-stopped
#    command: redis-server --slaveof redis-master 6379
#    logging:
#      driver: 'json-file'
#      options:
#        max-size: '50m'
#        max-file: '5'
#    networks:
#      - novu
  mongodb:
    image: mongo
    container_name: dotnet-novu-mongodb
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - mongodb:/data/db
    ports:
      - ${MONGO_PORT:-27017}:27017
    networks:
      - novu
  novu-api:
    image: 'ghcr.io/novuhq/novu/api:${IMAGE_VERSION}'
    depends_on:
      - mongodb
      - redis
    container_name: dotnet-novu-api
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      NODE_ENV: ${NODE_ENV}
      API_ROOT_URL: http://localhost:${API_PORT}
      DISABLE_USER_REGISTRATION: ${DISABLE_USER_REGISTRATION}
      PORT: ${API_PORT}
      FRONT_BASE_URL: http://localhost:${APP_PORT}
      MONGO_URL: mongodb://mongodb:${MONGO_PORT}/novu-db
      MONGO_MAX_POOL_SIZE: ${MONGO_MAX_POOL_SIZE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB_INDEX: 2
      REDIS_CACHE_SERVICE_HOST: ${REDIS_CACHE_SERVICE_HOST}
      REDIS_CACHE_SERVICE_PORT: ${REDIS_CACHE_SERVICE_PORT}
      S3_LOCAL_STACK: http://localhost:${FORWARD_MINIO_CONSOLE_PORT}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: ${S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      JWT_SECRET: ${JWT_SECRET}
      STORE_ENCRYPTION_KEY: ${STORE_ENCRYPTION_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_APP_NAME: ${NEW_RELIC_APP_NAME}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_AGENT_ENABLED: "false"
      NEW_RELIC_MONITOR_MODE: "false"
      NEW_RELIC_ENABLED: "false"
      NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED: "false"
      LOGGING_LEVEL: "warn"
      API_CONTEXT_PATH: ${API_CONTEXT_PATH}
    ports:
      - ${API_PORT:-3000}:3000
    networks:
      - novu
  novu-worker:
    image: 'ghcr.io/novuhq/novu/worker:${IMAGE_VERSION}'
    depends_on:
      - mongodb
      - redis
    container_name: dotnet-novu-worker
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      NODE_ENV: ${NODE_ENV}
      MONGO_URL: mongodb://mongodb:${MONGO_PORT}/novu-db
      MONGO_MAX_POOL_SIZE: ${MONGO_MAX_POOL_SIZE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB_INDEX: 2
      REDIS_CACHE_SERVICE_HOST: ${REDIS_CACHE_SERVICE_HOST}
      REDIS_CACHE_SERVICE_PORT: ${REDIS_CACHE_SERVICE_PORT}
      S3_LOCAL_STACK: http://localhost:${FORWARD_MINIO_CONSOLE_PORT}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_REGION: ${S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      STORE_ENCRYPTION_KEY: ${STORE_ENCRYPTION_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
      NEW_RELIC_APP_NAME: ${NEW_RELIC_APP_NAME}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_AGENT_ENABLED: "false"
      NEW_RELIC_MONITOR_MODE: "false"
      NEW_RELIC_ENABLED: "false"
      NEW_RELIC_APPLICATION_LOGGING_FORWARDING_ENABLED: "false"
      LOGGING_LEVEL: "warn"
    networks:
      - novu
  novu-ws:
    image: 'ghcr.io/novuhq/novu/ws:${IMAGE_VERSION}'
    depends_on:
      - mongodb
      - redis
    container_name: dotnet-novu-ws
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      PORT: ${WS_PORT}
      NODE_ENV: ${NODE_ENV}
      MONGO_URL: mongodb://mongodb:${MONGO_PORT}/novu-db
      MONGO_MAX_POOL_SIZE: ${MONGO_MAX_POOL_SIZE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      WS_CONTEXT_PATH: ${WS_CONTEXT_PATH}
      LOGGING_LEVEL: "warn"
    ports:
      - ${WS_PORT:-3002}:3002
    networks:
      - novu
  novu-web:
    image: 'ghcr.io/novuhq/novu/web:${IMAGE_VERSION}'
    depends_on:
      - novu-api
      - novu-worker
    container_name: dotnet-novu-web
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      REACT_APP_API_URL: http://localhost:${API_PORT}
      REACT_APP_ENVIRONMENT: ${NODE_ENV}
      REACT_APP_WIDGET_EMBED_PATH: http://localhost:${WIDGET_EMBED_PORT}/embed.umd.min.js
      REACT_APP_DOCKER_HOSTED_ENV: 'true'
      REACT_APP_WS_URL: http://localhost:${WS_PORT}
      LOGGING_LEVEL: "warn"
      # turned off because causing problems
      IS_TEMPLATE_STORE_ENABLED: "false"
      # requires that there is a primary integration per environment/organisation
      IS_MULTI_PROVIDER_CONFIGURATION_ENABLED: "false"
      IS_MULTI_TENANCY_ENABLED: "false"
    ports:
      - ${APP_PORT:-4200}:4200
    networks:
      - novu
  novu-widget:
    image: 'ghcr.io/novuhq/novu/widget:${IMAGE_VERSION}'
    depends_on:
      - novu-api
      - novu-worker
      - novu-web
    container_name: dotnet-novu-widget
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      REACT_APP_API_URL: http://localhost:${API_PORT}
      REACT_APP_WS_URL: http://localhost:${WS_PORT}
      REACT_APP_ENVIRONMENT: ${NODE_ENV}
      WIDGET_CONTEXT_PATH: ${WIDGET_CONTEXT_PATH}
      LOGGING_LEVEL: "warn"
    ports:
      - ${WIDGET_PORT:-4500}:4500
    networks:
      - novu
  novu-embed:
    depends_on:
      - novu-widget
    image: 'ghcr.io/novuhq/novu/embed:${IMAGE_VERSION}'
    container_name: dotnet-novu-embed
    restart: unless-stopped
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '5'
    environment:
      WIDGET_URL: http://localhost:${WIDGET_PORT}
      LOGGING_LEVEL: "warn"
    ports:
      - ${WIDGET_EMBED_PORT:-4701}:4701
    networks:
      - novu
volumes:
  data:
  mongodb: ~
  minio:
    driver: local
networks:
  novu:
